// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// e_drift
arma::vec e_drift(double omega, int n_ts);
RcppExport SEXP gmwm_e_drift(SEXP omegaSEXP, SEXP n_tsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< int >::type n_ts(n_tsSEXP);
    __result = Rcpp::wrap(e_drift(omega, n_ts));
    return __result;
END_RCPP
}
// m2_drift
arma::vec m2_drift(double omega, int n_ts);
RcppExport SEXP gmwm_m2_drift(SEXP omegaSEXP, SEXP n_tsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< int >::type n_ts(n_tsSEXP);
    __result = Rcpp::wrap(m2_drift(omega, n_ts));
    return __result;
END_RCPP
}
// var_drift
arma::vec var_drift(double omega, int n_ts);
RcppExport SEXP gmwm_var_drift(SEXP omegaSEXP, SEXP n_tsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< int >::type n_ts(n_tsSEXP);
    __result = Rcpp::wrap(var_drift(omega, n_ts));
    return __result;
END_RCPP
}
// avar_to_cpp
arma::mat avar_to_cpp(arma::vec x);
RcppExport SEXP gmwm_avar_to_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    __result = Rcpp::wrap(avar_to_cpp(x));
    return __result;
END_RCPP
}
// avar_mo_cpp
arma::mat avar_mo_cpp(arma::vec x);
RcppExport SEXP gmwm_avar_mo_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    __result = Rcpp::wrap(avar_mo_cpp(x));
    return __result;
END_RCPP
}
// arma_adapter
arma::vec arma_adapter(const arma::vec& theta, unsigned int p, unsigned int q, const arma::vec& tau);
RcppExport SEXP gmwm_arma_adapter(SEXP thetaSEXP, SEXP pSEXP, SEXP qSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type p(pSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type q(qSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau(tauSEXP);
    __result = Rcpp::wrap(arma_adapter(theta, p, q, tau));
    return __result;
END_RCPP
}
// jacobian_arma
arma::mat jacobian_arma(const arma::vec& theta, unsigned int p, unsigned int q, const arma::vec& tau);
RcppExport SEXP gmwm_jacobian_arma(SEXP thetaSEXP, SEXP pSEXP, SEXP qSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type p(pSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type q(qSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau(tauSEXP);
    __result = Rcpp::wrap(jacobian_arma(theta, p, q, tau));
    return __result;
END_RCPP
}
// deriv_ar1
arma::mat deriv_ar1(double phi, double sig2, arma::vec tau);
RcppExport SEXP gmwm_deriv_ar1(SEXP phiSEXP, SEXP sig2SEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau(tauSEXP);
    __result = Rcpp::wrap(deriv_ar1(phi, sig2, tau));
    return __result;
END_RCPP
}
// deriv_2nd_ar1
arma::mat deriv_2nd_ar1(double phi, double sig2, arma::vec tau);
RcppExport SEXP gmwm_deriv_2nd_ar1(SEXP phiSEXP, SEXP sig2SEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau(tauSEXP);
    __result = Rcpp::wrap(deriv_2nd_ar1(phi, sig2, tau));
    return __result;
END_RCPP
}
// deriv_dr
arma::mat deriv_dr(double omega, arma::vec tau);
RcppExport SEXP gmwm_deriv_dr(SEXP omegaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau(tauSEXP);
    __result = Rcpp::wrap(deriv_dr(omega, tau));
    return __result;
END_RCPP
}
// deriv_2nd_dr
arma::mat deriv_2nd_dr(arma::vec tau);
RcppExport SEXP gmwm_deriv_2nd_dr(SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type tau(tauSEXP);
    __result = Rcpp::wrap(deriv_2nd_dr(tau));
    return __result;
END_RCPP
}
// deriv_qn
arma::mat deriv_qn(arma::vec tau);
RcppExport SEXP gmwm_deriv_qn(SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type tau(tauSEXP);
    __result = Rcpp::wrap(deriv_qn(tau));
    return __result;
END_RCPP
}
// deriv_rw
arma::mat deriv_rw(arma::vec tau);
RcppExport SEXP gmwm_deriv_rw(SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type tau(tauSEXP);
    __result = Rcpp::wrap(deriv_rw(tau));
    return __result;
END_RCPP
}
// deriv_wn
arma::mat deriv_wn(arma::vec tau);
RcppExport SEXP gmwm_deriv_wn(SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type tau(tauSEXP);
    __result = Rcpp::wrap(deriv_wn(tau));
    return __result;
END_RCPP
}
// derivative_first_matrix
arma::mat derivative_first_matrix(const arma::vec& theta, const std::vector<std::string>& desc, const arma::field<arma::vec>& objdesc, const arma::vec& tau);
RcppExport SEXP gmwm_derivative_first_matrix(SEXP thetaSEXP, SEXP descSEXP, SEXP objdescSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type desc(descSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type objdesc(objdescSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau(tauSEXP);
    __result = Rcpp::wrap(derivative_first_matrix(theta, desc, objdesc, tau));
    return __result;
END_RCPP
}
// D_matrix
arma::mat D_matrix(const arma::vec& theta, const std::vector<std::string>& desc, const arma::field<arma::vec>& objdesc, const arma::vec& tau, const arma::vec& omegadiff);
RcppExport SEXP gmwm_D_matrix(SEXP thetaSEXP, SEXP descSEXP, SEXP objdescSEXP, SEXP tauSEXP, SEXP omegadiffSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type desc(descSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type objdesc(objdescSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type omegadiff(omegadiffSEXP);
    __result = Rcpp::wrap(D_matrix(theta, desc, objdesc, tau, omegadiff));
    return __result;
END_RCPP
}
// Rcpp_ARIMA
arma::vec Rcpp_ARIMA(const arma::vec& data, const arma::vec& params);
RcppExport SEXP gmwm_Rcpp_ARIMA(SEXP dataSEXP, SEXP paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    __result = Rcpp::wrap(Rcpp_ARIMA(data, params));
    return __result;
END_RCPP
}
// sort_mat
arma::mat sort_mat(arma::mat x, unsigned int col);
RcppExport SEXP gmwm_sort_mat(SEXP xSEXP, SEXP colSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type col(colSEXP);
    __result = Rcpp::wrap(sort_mat(x, col));
    return __result;
END_RCPP
}
// rev_col_subset
arma::mat rev_col_subset(arma::mat x, unsigned int start, unsigned int end);
RcppExport SEXP gmwm_rev_col_subset(SEXP xSEXP, SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type start(startSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type end(endSEXP);
    __result = Rcpp::wrap(rev_col_subset(x, start, end));
    return __result;
END_RCPP
}
// rev_row_subset
arma::mat rev_row_subset(arma::mat x, unsigned int start, unsigned int end);
RcppExport SEXP gmwm_rev_row_subset(SEXP xSEXP, SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type start(startSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type end(endSEXP);
    __result = Rcpp::wrap(rev_row_subset(x, start, end));
    return __result;
END_RCPP
}
// reverse_vec
arma::vec reverse_vec(arma::vec x);
RcppExport SEXP gmwm_reverse_vec(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    __result = Rcpp::wrap(reverse_vec(x));
    return __result;
END_RCPP
}
// field_to_matrix
arma::mat field_to_matrix(arma::field<arma::vec> x);
RcppExport SEXP gmwm_field_to_matrix(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::field<arma::vec> >::type x(xSEXP);
    __result = Rcpp::wrap(field_to_matrix(x));
    return __result;
END_RCPP
}
// sum_field_vec
double sum_field_vec(const arma::field<arma::vec>& x);
RcppExport SEXP gmwm_sum_field_vec(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type x(xSEXP);
    __result = Rcpp::wrap(sum_field_vec(x));
    return __result;
END_RCPP
}
// build_model_set
std::set<std::vector<std::string > > build_model_set(const arma::mat& combs, std::vector <std::string> x);
RcppExport SEXP gmwm_build_model_set(SEXP combsSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat& >::type combs(combsSEXP);
    Rcpp::traits::input_parameter< std::vector <std::string> >::type x(xSEXP);
    __result = Rcpp::wrap(build_model_set(combs, x));
    return __result;
END_RCPP
}
// vector_to_set
std::set<std::vector<std::string> > vector_to_set(std::vector<std::vector<std::string > > model_str);
RcppExport SEXP gmwm_vector_to_set(SEXP model_strSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<std::vector<std::string > > >::type model_str(model_strSEXP);
    __result = Rcpp::wrap(vector_to_set(model_str));
    return __result;
END_RCPP
}
// find_full_model
std::vector<std::string> find_full_model(std::vector<std::vector<std::string> > x);
RcppExport SEXP gmwm_find_full_model(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<std::vector<std::string> > >::type x(xSEXP);
    __result = Rcpp::wrap(find_full_model(x));
    return __result;
END_RCPP
}
// rank_models
arma::field< arma::field<arma::field<arma::mat> > > rank_models(const arma::vec& data, const std::vector<std::vector < std::string > >& model_str, const std::vector< std::string >& full_model, double alpha, std::string compute_v, std::string model_type, unsigned int K, unsigned int H, unsigned int G, bool robust, double eff, bool bs_optimism);
RcppExport SEXP gmwm_rank_models(SEXP dataSEXP, SEXP model_strSEXP, SEXP full_modelSEXP, SEXP alphaSEXP, SEXP compute_vSEXP, SEXP model_typeSEXP, SEXP KSEXP, SEXP HSEXP, SEXP GSEXP, SEXP robustSEXP, SEXP effSEXP, SEXP bs_optimismSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector < std::string > >& >::type model_str(model_strSEXP);
    Rcpp::traits::input_parameter< const std::vector< std::string >& >::type full_model(full_modelSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< std::string >::type compute_v(compute_vSEXP);
    Rcpp::traits::input_parameter< std::string >::type model_type(model_typeSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type H(HSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type G(GSEXP);
    Rcpp::traits::input_parameter< bool >::type robust(robustSEXP);
    Rcpp::traits::input_parameter< double >::type eff(effSEXP);
    Rcpp::traits::input_parameter< bool >::type bs_optimism(bs_optimismSEXP);
    __result = Rcpp::wrap(rank_models(data, model_str, full_model, alpha, compute_v, model_type, K, H, G, robust, eff, bs_optimism));
    return __result;
END_RCPP
}
// auto_imu
arma::field< arma::field<arma::field<arma::mat> > > auto_imu(const arma::mat& data, const arma::mat& combs, const std::vector< std::string >& full_model, double alpha, std::string compute_v, std::string model_type, unsigned int K, unsigned int H, unsigned int G, bool robust, double eff, bool bs_optimism);
RcppExport SEXP gmwm_auto_imu(SEXP dataSEXP, SEXP combsSEXP, SEXP full_modelSEXP, SEXP alphaSEXP, SEXP compute_vSEXP, SEXP model_typeSEXP, SEXP KSEXP, SEXP HSEXP, SEXP GSEXP, SEXP robustSEXP, SEXP effSEXP, SEXP bs_optimismSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type combs(combsSEXP);
    Rcpp::traits::input_parameter< const std::vector< std::string >& >::type full_model(full_modelSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< std::string >::type compute_v(compute_vSEXP);
    Rcpp::traits::input_parameter< std::string >::type model_type(model_typeSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type H(HSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type G(GSEXP);
    Rcpp::traits::input_parameter< bool >::type robust(robustSEXP);
    Rcpp::traits::input_parameter< double >::type eff(effSEXP);
    Rcpp::traits::input_parameter< bool >::type bs_optimism(bs_optimismSEXP);
    __result = Rcpp::wrap(auto_imu(data, combs, full_model, alpha, compute_v, model_type, K, H, G, robust, eff, bs_optimism));
    return __result;
END_RCPP
}
// cov_bootstrapper
arma::mat cov_bootstrapper(const arma::vec& theta, const std::vector<std::string>& desc, const arma::field<arma::vec>& objdesc, unsigned int N, bool robust, double eff, unsigned int H, bool diagonal_matrix);
RcppExport SEXP gmwm_cov_bootstrapper(SEXP thetaSEXP, SEXP descSEXP, SEXP objdescSEXP, SEXP NSEXP, SEXP robustSEXP, SEXP effSEXP, SEXP HSEXP, SEXP diagonal_matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type desc(descSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type objdesc(objdescSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< bool >::type robust(robustSEXP);
    Rcpp::traits::input_parameter< double >::type eff(effSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type H(HSEXP);
    Rcpp::traits::input_parameter< bool >::type diagonal_matrix(diagonal_matrixSEXP);
    __result = Rcpp::wrap(cov_bootstrapper(theta, desc, objdesc, N, robust, eff, H, diagonal_matrix));
    return __result;
END_RCPP
}
// optimism_bootstrapper
arma::mat optimism_bootstrapper(const arma::vec& theta, const std::vector<std::string>& desc, const arma::field<arma::vec>& objdesc, const arma::vec& scales, std::string model_type, unsigned int N, bool robust, double eff, double alpha, unsigned int H);
RcppExport SEXP gmwm_optimism_bootstrapper(SEXP thetaSEXP, SEXP descSEXP, SEXP objdescSEXP, SEXP scalesSEXP, SEXP model_typeSEXP, SEXP NSEXP, SEXP robustSEXP, SEXP effSEXP, SEXP alphaSEXP, SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type desc(descSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type objdesc(objdescSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type scales(scalesSEXP);
    Rcpp::traits::input_parameter< std::string >::type model_type(model_typeSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< bool >::type robust(robustSEXP);
    Rcpp::traits::input_parameter< double >::type eff(effSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type H(HSEXP);
    __result = Rcpp::wrap(optimism_bootstrapper(theta, desc, objdesc, scales, model_type, N, robust, eff, alpha, H));
    return __result;
END_RCPP
}
// opt_n_gof_bootstrapper
arma::field<arma::mat> opt_n_gof_bootstrapper(const arma::vec& theta, const std::vector<std::string>& desc, const arma::field<arma::vec>& objdesc, const arma::vec& scales, std::string model_type, unsigned int N, bool robust, double eff, double alpha, unsigned int H);
RcppExport SEXP gmwm_opt_n_gof_bootstrapper(SEXP thetaSEXP, SEXP descSEXP, SEXP objdescSEXP, SEXP scalesSEXP, SEXP model_typeSEXP, SEXP NSEXP, SEXP robustSEXP, SEXP effSEXP, SEXP alphaSEXP, SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type desc(descSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type objdesc(objdescSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type scales(scalesSEXP);
    Rcpp::traits::input_parameter< std::string >::type model_type(model_typeSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< bool >::type robust(robustSEXP);
    Rcpp::traits::input_parameter< double >::type eff(effSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type H(HSEXP);
    __result = Rcpp::wrap(opt_n_gof_bootstrapper(theta, desc, objdesc, scales, model_type, N, robust, eff, alpha, H));
    return __result;
END_RCPP
}
// gmwm_sd_bootstrapper
arma::vec gmwm_sd_bootstrapper(const arma::vec& theta, const std::vector<std::string>& desc, const arma::field<arma::vec>& objdesc, const arma::vec& scales, std::string model_type, unsigned int N, bool robust, double eff, double alpha, unsigned int H);
RcppExport SEXP gmwm_gmwm_sd_bootstrapper(SEXP thetaSEXP, SEXP descSEXP, SEXP objdescSEXP, SEXP scalesSEXP, SEXP model_typeSEXP, SEXP NSEXP, SEXP robustSEXP, SEXP effSEXP, SEXP alphaSEXP, SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type desc(descSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type objdesc(objdescSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type scales(scalesSEXP);
    Rcpp::traits::input_parameter< std::string >::type model_type(model_typeSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< bool >::type robust(robustSEXP);
    Rcpp::traits::input_parameter< double >::type eff(effSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type H(HSEXP);
    __result = Rcpp::wrap(gmwm_sd_bootstrapper(theta, desc, objdesc, scales, model_type, N, robust, eff, alpha, H));
    return __result;
END_RCPP
}
// boot_pval_gof
arma::vec boot_pval_gof(double obj, const arma::vec& obj_boot, unsigned int B, double alpha);
RcppExport SEXP gmwm_boot_pval_gof(SEXP objSEXP, SEXP obj_bootSEXP, SEXP BSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type obj(objSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type obj_boot(obj_bootSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    __result = Rcpp::wrap(boot_pval_gof(obj, obj_boot, B, alpha));
    return __result;
END_RCPP
}
// gmwm_param_bootstrapper
arma::field<arma::mat> gmwm_param_bootstrapper(const arma::vec& theta, const std::vector<std::string>& desc, const arma::field<arma::vec>& objdesc, const arma::vec& scales, std::string model_type, unsigned int N, bool robust, double eff, double alpha, unsigned int H);
RcppExport SEXP gmwm_gmwm_param_bootstrapper(SEXP thetaSEXP, SEXP descSEXP, SEXP objdescSEXP, SEXP scalesSEXP, SEXP model_typeSEXP, SEXP NSEXP, SEXP robustSEXP, SEXP effSEXP, SEXP alphaSEXP, SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type desc(descSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type objdesc(objdescSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type scales(scalesSEXP);
    Rcpp::traits::input_parameter< std::string >::type model_type(model_typeSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< bool >::type robust(robustSEXP);
    Rcpp::traits::input_parameter< double >::type eff(effSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type H(HSEXP);
    __result = Rcpp::wrap(gmwm_param_bootstrapper(theta, desc, objdesc, scales, model_type, N, robust, eff, alpha, H));
    return __result;
END_RCPP
}
// all_bootstrapper
arma::field<arma::mat> all_bootstrapper(const arma::vec& theta, const std::vector<std::string>& desc, const arma::field<arma::vec>& objdesc, const arma::vec& scales, std::string model_type, unsigned int N, bool robust, double eff, double alpha, unsigned int H);
RcppExport SEXP gmwm_all_bootstrapper(SEXP thetaSEXP, SEXP descSEXP, SEXP objdescSEXP, SEXP scalesSEXP, SEXP model_typeSEXP, SEXP NSEXP, SEXP robustSEXP, SEXP effSEXP, SEXP alphaSEXP, SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type desc(descSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type objdesc(objdescSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type scales(scalesSEXP);
    Rcpp::traits::input_parameter< std::string >::type model_type(model_typeSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< bool >::type robust(robustSEXP);
    Rcpp::traits::input_parameter< double >::type eff(effSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type H(HSEXP);
    __result = Rcpp::wrap(all_bootstrapper(theta, desc, objdesc, scales, model_type, N, robust, eff, alpha, H));
    return __result;
END_RCPP
}
// Mod_squared_cpp
arma::vec Mod_squared_cpp(const arma::cx_vec& x);
RcppExport SEXP gmwm_Mod_squared_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::cx_vec& >::type x(xSEXP);
    __result = Rcpp::wrap(Mod_squared_cpp(x));
    return __result;
END_RCPP
}
// Mod_cpp
arma::vec Mod_cpp(const arma::cx_vec& x);
RcppExport SEXP gmwm_Mod_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::cx_vec& >::type x(xSEXP);
    __result = Rcpp::wrap(Mod_cpp(x));
    return __result;
END_RCPP
}
// compute_cov_cpp
arma::field<arma::mat> compute_cov_cpp(arma::field<arma::vec> signal_modwt, unsigned int nb_level, std::string compute_v, bool robust, double eff);
RcppExport SEXP gmwm_compute_cov_cpp(SEXP signal_modwtSEXP, SEXP nb_levelSEXP, SEXP compute_vSEXP, SEXP robustSEXP, SEXP effSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::field<arma::vec> >::type signal_modwt(signal_modwtSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nb_level(nb_levelSEXP);
    Rcpp::traits::input_parameter< std::string >::type compute_v(compute_vSEXP);
    Rcpp::traits::input_parameter< bool >::type robust(robustSEXP);
    Rcpp::traits::input_parameter< double >::type eff(effSEXP);
    __result = Rcpp::wrap(compute_cov_cpp(signal_modwt, nb_level, compute_v, robust, eff));
    return __result;
END_RCPP
}
// fast_cov_cpp
arma::mat fast_cov_cpp(const arma::vec& ci_hi, const arma::vec& ci_lo);
RcppExport SEXP gmwm_fast_cov_cpp(SEXP ci_hiSEXP, SEXP ci_loSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type ci_hi(ci_hiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ci_lo(ci_loSEXP);
    __result = Rcpp::wrap(fast_cov_cpp(ci_hi, ci_lo));
    return __result;
END_RCPP
}
// dwt_cpp
arma::field<arma::vec> dwt_cpp(arma::vec x, std::string filter_name, unsigned int nlevels, std::string boundary, bool brickwall);
RcppExport SEXP gmwm_dwt_cpp(SEXP xSEXP, SEXP filter_nameSEXP, SEXP nlevelsSEXP, SEXP boundarySEXP, SEXP brickwallSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type filter_name(filter_nameSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nlevels(nlevelsSEXP);
    Rcpp::traits::input_parameter< std::string >::type boundary(boundarySEXP);
    Rcpp::traits::input_parameter< bool >::type brickwall(brickwallSEXP);
    __result = Rcpp::wrap(dwt_cpp(x, filter_name, nlevels, boundary, brickwall));
    return __result;
END_RCPP
}
// modwt_cpp
arma::field<arma::vec> modwt_cpp(arma::vec x, std::string filter_name, unsigned int nlevels, std::string boundary, bool brickwall);
RcppExport SEXP gmwm_modwt_cpp(SEXP xSEXP, SEXP filter_nameSEXP, SEXP nlevelsSEXP, SEXP boundarySEXP, SEXP brickwallSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type filter_name(filter_nameSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nlevels(nlevelsSEXP);
    Rcpp::traits::input_parameter< std::string >::type boundary(boundarySEXP);
    Rcpp::traits::input_parameter< bool >::type brickwall(brickwallSEXP);
    __result = Rcpp::wrap(modwt_cpp(x, filter_name, nlevels, boundary, brickwall));
    return __result;
END_RCPP
}
// brick_wall
arma::field<arma::vec> brick_wall(arma::field<arma::vec> x, arma::field<arma::vec> wave_filter, std::string method);
RcppExport SEXP gmwm_brick_wall(SEXP xSEXP, SEXP wave_filterSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::field<arma::vec> >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::vec> >::type wave_filter(wave_filterSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    __result = Rcpp::wrap(brick_wall(x, wave_filter, method));
    return __result;
END_RCPP
}
// gen_wn
arma::vec gen_wn(const unsigned int N, const double sigma2);
RcppExport SEXP gmwm_gen_wn(SEXP NSEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma2(sigma2SEXP);
    __result = Rcpp::wrap(gen_wn(N, sigma2));
    return __result;
END_RCPP
}
// gen_dr
arma::vec gen_dr(const unsigned int N, const double slope);
RcppExport SEXP gmwm_gen_dr(SEXP NSEXP, SEXP slopeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const double >::type slope(slopeSEXP);
    __result = Rcpp::wrap(gen_dr(N, slope));
    return __result;
END_RCPP
}
// gen_qn
arma::vec gen_qn(const unsigned int N, double q2);
RcppExport SEXP gmwm_gen_qn(SEXP NSEXP, SEXP q2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type q2(q2SEXP);
    __result = Rcpp::wrap(gen_qn(N, q2));
    return __result;
END_RCPP
}
// gen_ar1
arma::vec gen_ar1(const unsigned int N, const double phi, const double sigma2);
RcppExport SEXP gmwm_gen_ar1(SEXP NSEXP, SEXP phiSEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma2(sigma2SEXP);
    __result = Rcpp::wrap(gen_ar1(N, phi, sigma2));
    return __result;
END_RCPP
}
// gen_rw
arma::vec gen_rw(const unsigned int N, const double sigma2);
RcppExport SEXP gmwm_gen_rw(SEXP NSEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma2(sigma2SEXP);
    __result = Rcpp::wrap(gen_rw(N, sigma2));
    return __result;
END_RCPP
}
// gen_arma
arma::vec gen_arma(const unsigned int N, const arma::vec& ar, const arma::vec& ma, const double sigma2, unsigned int n_start);
RcppExport SEXP gmwm_gen_arma(SEXP NSEXP, SEXP arSEXP, SEXP maSEXP, SEXP sigma2SEXP, SEXP n_startSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ar(arSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ma(maSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_start(n_startSEXP);
    __result = Rcpp::wrap(gen_arma(N, ar, ma, sigma2, n_start));
    return __result;
END_RCPP
}
// gen_model
arma::vec gen_model(unsigned int N, const arma::vec& theta, const std::vector<std::string>& desc, const arma::field<arma::vec>& objdesc);
RcppExport SEXP gmwm_gen_model(SEXP NSEXP, SEXP thetaSEXP, SEXP descSEXP, SEXP objdescSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type desc(descSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type objdesc(objdescSEXP);
    __result = Rcpp::wrap(gen_model(N, theta, desc, objdesc));
    return __result;
END_RCPP
}
// gen_lts
arma::mat gen_lts(unsigned int N, const arma::vec& theta, const std::vector<std::string>& desc, const arma::field<arma::vec>& objdesc);
RcppExport SEXP gmwm_gen_lts(SEXP NSEXP, SEXP thetaSEXP, SEXP descSEXP, SEXP objdescSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type desc(descSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type objdesc(objdescSEXP);
    __result = Rcpp::wrap(gen_lts(N, theta, desc, objdesc));
    return __result;
END_RCPP
}
// code_zero
arma::vec code_zero(arma::vec theta);
RcppExport SEXP gmwm_code_zero(SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    __result = Rcpp::wrap(code_zero(theta));
    return __result;
END_RCPP
}
// gmwm_engine
arma::vec gmwm_engine(const arma::vec& theta, const std::vector<std::string>& desc, const arma::field<arma::vec>& objdesc, std::string model_type, arma::vec wv_empir, arma::mat omega, arma::vec scales, bool starting);
RcppExport SEXP gmwm_gmwm_engine(SEXP thetaSEXP, SEXP descSEXP, SEXP objdescSEXP, SEXP model_typeSEXP, SEXP wv_empirSEXP, SEXP omegaSEXP, SEXP scalesSEXP, SEXP startingSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type desc(descSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type objdesc(objdescSEXP);
    Rcpp::traits::input_parameter< std::string >::type model_type(model_typeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type wv_empir(wv_empirSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type scales(scalesSEXP);
    Rcpp::traits::input_parameter< bool >::type starting(startingSEXP);
    __result = Rcpp::wrap(gmwm_engine(theta, desc, objdesc, model_type, wv_empir, omega, scales, starting));
    return __result;
END_RCPP
}
// gmwm_update_cpp
arma::field<arma::mat> gmwm_update_cpp(arma::vec theta, const std::vector<std::string>& desc, const arma::field<arma::vec>& objdesc, std::string model_type, unsigned int N, double expect_diff, double ranged, const arma::mat& orgV, const arma::vec& scales, const arma::mat& wv, bool starting, std::string compute_v, unsigned int K, unsigned int H, unsigned int G, bool robust, double eff);
RcppExport SEXP gmwm_gmwm_update_cpp(SEXP thetaSEXP, SEXP descSEXP, SEXP objdescSEXP, SEXP model_typeSEXP, SEXP NSEXP, SEXP expect_diffSEXP, SEXP rangedSEXP, SEXP orgVSEXP, SEXP scalesSEXP, SEXP wvSEXP, SEXP startingSEXP, SEXP compute_vSEXP, SEXP KSEXP, SEXP HSEXP, SEXP GSEXP, SEXP robustSEXP, SEXP effSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type desc(descSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type objdesc(objdescSEXP);
    Rcpp::traits::input_parameter< std::string >::type model_type(model_typeSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type expect_diff(expect_diffSEXP);
    Rcpp::traits::input_parameter< double >::type ranged(rangedSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type orgV(orgVSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type scales(scalesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type wv(wvSEXP);
    Rcpp::traits::input_parameter< bool >::type starting(startingSEXP);
    Rcpp::traits::input_parameter< std::string >::type compute_v(compute_vSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type H(HSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type G(GSEXP);
    Rcpp::traits::input_parameter< bool >::type robust(robustSEXP);
    Rcpp::traits::input_parameter< double >::type eff(effSEXP);
    __result = Rcpp::wrap(gmwm_update_cpp(theta, desc, objdesc, model_type, N, expect_diff, ranged, orgV, scales, wv, starting, compute_v, K, H, G, robust, eff));
    return __result;
END_RCPP
}
// gmwm_master_cpp
arma::field<arma::mat> gmwm_master_cpp(const arma::vec& data, arma::vec theta, const std::vector<std::string>& desc, const arma::field<arma::vec>& objdesc, std::string model_type, bool starting, double alpha, std::string compute_v, unsigned int K, unsigned int H, unsigned int G, bool robust, double eff);
RcppExport SEXP gmwm_gmwm_master_cpp(SEXP dataSEXP, SEXP thetaSEXP, SEXP descSEXP, SEXP objdescSEXP, SEXP model_typeSEXP, SEXP startingSEXP, SEXP alphaSEXP, SEXP compute_vSEXP, SEXP KSEXP, SEXP HSEXP, SEXP GSEXP, SEXP robustSEXP, SEXP effSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type desc(descSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type objdesc(objdescSEXP);
    Rcpp::traits::input_parameter< std::string >::type model_type(model_typeSEXP);
    Rcpp::traits::input_parameter< bool >::type starting(startingSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< std::string >::type compute_v(compute_vSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type H(HSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type G(GSEXP);
    Rcpp::traits::input_parameter< bool >::type robust(robustSEXP);
    Rcpp::traits::input_parameter< double >::type eff(effSEXP);
    __result = Rcpp::wrap(gmwm_master_cpp(data, theta, desc, objdesc, model_type, starting, alpha, compute_v, K, H, G, robust, eff));
    return __result;
END_RCPP
}
// guess_initial
arma::vec guess_initial(const std::vector<std::string>& desc, const arma::field<arma::vec>& objdesc, std::string model_type, unsigned int num_param, double expect_diff, unsigned int N, const arma::mat& wv, const arma::vec& tau, double ranged, unsigned int G);
RcppExport SEXP gmwm_guess_initial(SEXP descSEXP, SEXP objdescSEXP, SEXP model_typeSEXP, SEXP num_paramSEXP, SEXP expect_diffSEXP, SEXP NSEXP, SEXP wvSEXP, SEXP tauSEXP, SEXP rangedSEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type desc(descSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type objdesc(objdescSEXP);
    Rcpp::traits::input_parameter< std::string >::type model_type(model_typeSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type num_param(num_paramSEXP);
    Rcpp::traits::input_parameter< double >::type expect_diff(expect_diffSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type wv(wvSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type ranged(rangedSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type G(GSEXP);
    __result = Rcpp::wrap(guess_initial(desc, objdesc, model_type, num_param, expect_diff, N, wv, tau, ranged, G));
    return __result;
END_RCPP
}
// ar1_draw
arma::vec ar1_draw(unsigned int draw_id, double last_phi, double sigma2_total, std::string model_type);
RcppExport SEXP gmwm_ar1_draw(SEXP draw_idSEXP, SEXP last_phiSEXP, SEXP sigma2_totalSEXP, SEXP model_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< unsigned int >::type draw_id(draw_idSEXP);
    Rcpp::traits::input_parameter< double >::type last_phi(last_phiSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_total(sigma2_totalSEXP);
    Rcpp::traits::input_parameter< std::string >::type model_type(model_typeSEXP);
    __result = Rcpp::wrap(ar1_draw(draw_id, last_phi, sigma2_total, model_type));
    return __result;
END_RCPP
}
// arma_draws
arma::vec arma_draws(unsigned int p, unsigned int q, double sigma2_total);
RcppExport SEXP gmwm_arma_draws(SEXP pSEXP, SEXP qSEXP, SEXP sigma2_totalSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< unsigned int >::type p(pSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_total(sigma2_totalSEXP);
    __result = Rcpp::wrap(arma_draws(p, q, sigma2_total));
    return __result;
END_RCPP
}
// guess_initial_old
arma::vec guess_initial_old(const std::vector<std::string>& desc, const arma::field<arma::vec>& objdesc, std::string model_type, unsigned int num_param, double expect_diff, unsigned int N, const arma::vec& wv_empir, const arma::vec& tau, unsigned int B);
RcppExport SEXP gmwm_guess_initial_old(SEXP descSEXP, SEXP objdescSEXP, SEXP model_typeSEXP, SEXP num_paramSEXP, SEXP expect_diffSEXP, SEXP NSEXP, SEXP wv_empirSEXP, SEXP tauSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type desc(descSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type objdesc(objdescSEXP);
    Rcpp::traits::input_parameter< std::string >::type model_type(model_typeSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type num_param(num_paramSEXP);
    Rcpp::traits::input_parameter< double >::type expect_diff(expect_diffSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type wv_empir(wv_empirSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type B(BSEXP);
    __result = Rcpp::wrap(guess_initial_old(desc, objdesc, model_type, num_param, expect_diff, N, wv_empir, tau, B));
    return __result;
END_RCPP
}
// idf_arma
arma::vec idf_arma(const arma::vec& ar, const arma::vec& ma, const double sigma2, unsigned int N, bool robust, double eff, unsigned int H);
RcppExport SEXP gmwm_idf_arma(SEXP arSEXP, SEXP maSEXP, SEXP sigma2SEXP, SEXP NSEXP, SEXP robustSEXP, SEXP effSEXP, SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type ar(arSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ma(maSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< bool >::type robust(robustSEXP);
    Rcpp::traits::input_parameter< double >::type eff(effSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type H(HSEXP);
    __result = Rcpp::wrap(idf_arma(ar, ma, sigma2, N, robust, eff, H));
    return __result;
END_RCPP
}
// idf_arma_total
arma::vec idf_arma_total(const arma::vec& ar, const arma::vec& ma, const double sigma2, unsigned int N, bool robust, double eff, unsigned int H);
RcppExport SEXP gmwm_idf_arma_total(SEXP arSEXP, SEXP maSEXP, SEXP sigma2SEXP, SEXP NSEXP, SEXP robustSEXP, SEXP effSEXP, SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type ar(arSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ma(maSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< bool >::type robust(robustSEXP);
    Rcpp::traits::input_parameter< double >::type eff(effSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type H(HSEXP);
    __result = Rcpp::wrap(idf_arma_total(ar, ma, sigma2, N, robust, eff, H));
    return __result;
END_RCPP
}
// calculate_psi_matrix
arma::mat calculate_psi_matrix(const arma::mat& A, const arma::mat& v_hat, const arma::mat& omega);
RcppExport SEXP gmwm_calculate_psi_matrix(SEXP ASEXP, SEXP v_hatSEXP, SEXP omegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type v_hat(v_hatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type omega(omegaSEXP);
    __result = Rcpp::wrap(calculate_psi_matrix(A, v_hat, omega));
    return __result;
END_RCPP
}
// format_ci
arma::mat format_ci(const arma::vec& theta, const arma::vec& se, double alpha);
RcppExport SEXP gmwm_format_ci(SEXP thetaSEXP, SEXP seSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type se(seSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    __result = Rcpp::wrap(format_ci(theta, se, alpha));
    return __result;
END_RCPP
}
// theta_ci
arma::mat theta_ci(const arma::vec& theta, const arma::mat& A, const arma::mat& v_hat, const arma::mat& omega, double alpha);
RcppExport SEXP gmwm_theta_ci(SEXP thetaSEXP, SEXP ASEXP, SEXP v_hatSEXP, SEXP omegaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type v_hat(v_hatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    __result = Rcpp::wrap(theta_ci(theta, A, v_hat, omega, alpha));
    return __result;
END_RCPP
}
// gof_test
arma::vec gof_test(arma::vec theta, const std::vector<std::string>& desc, const arma::field<arma::vec>& objdesc, std::string model_type, const arma::vec& tau, const arma::mat& v_hat, const arma::vec& wv_empir);
RcppExport SEXP gmwm_gof_test(SEXP thetaSEXP, SEXP descSEXP, SEXP objdescSEXP, SEXP model_typeSEXP, SEXP tauSEXP, SEXP v_hatSEXP, SEXP wv_empirSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type desc(descSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type objdesc(objdescSEXP);
    Rcpp::traits::input_parameter< std::string >::type model_type(model_typeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type v_hat(v_hatSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type wv_empir(wv_empirSEXP);
    __result = Rcpp::wrap(gof_test(theta, desc, objdesc, model_type, tau, v_hat, wv_empir));
    return __result;
END_RCPP
}
// bootstrap_gof_test
arma::vec bootstrap_gof_test(double obj_value, arma::vec bs_obj_values, double alpha, bool bs_gof_p_ci);
RcppExport SEXP gmwm_bootstrap_gof_test(SEXP obj_valueSEXP, SEXP bs_obj_valuesSEXP, SEXP alphaSEXP, SEXP bs_gof_p_ciSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type obj_value(obj_valueSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type bs_obj_values(bs_obj_valuesSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type bs_gof_p_ci(bs_gof_p_ciSEXP);
    __result = Rcpp::wrap(bootstrap_gof_test(obj_value, bs_obj_values, alpha, bs_gof_p_ci));
    return __result;
END_RCPP
}
// B_matrix
arma::mat B_matrix(const arma::mat& A, const arma::mat& at_omega);
RcppExport SEXP gmwm_B_matrix(SEXP ASEXP, SEXP at_omegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type at_omega(at_omegaSEXP);
    __result = Rcpp::wrap(B_matrix(A, at_omega));
    return __result;
END_RCPP
}
// model_score
arma::vec model_score(arma::mat A, arma::mat D, arma::mat omega, arma::mat v_hat, double obj_value);
RcppExport SEXP gmwm_model_score(SEXP ASEXP, SEXP DSEXP, SEXP omegaSEXP, SEXP v_hatSEXP, SEXP obj_valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type D(DSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type v_hat(v_hatSEXP);
    Rcpp::traits::input_parameter< double >::type obj_value(obj_valueSEXP);
    __result = Rcpp::wrap(model_score(A, D, omega, v_hat, obj_value));
    return __result;
END_RCPP
}
// obj_extract
arma::field<arma::vec> obj_extract(arma::vec theta, arma::vec objdesc, unsigned int& cur_position);
RcppExport SEXP gmwm_obj_extract(SEXP thetaSEXP, SEXP objdescSEXP, SEXP cur_positionSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type objdesc(objdescSEXP);
    Rcpp::traits::input_parameter< unsigned int& >::type cur_position(cur_positionSEXP);
    __result = Rcpp::wrap(obj_extract(theta, objdesc, cur_position));
    return __result;
END_RCPP
}
// getObjFunStarting
double getObjFunStarting(const arma::vec& theta, const std::vector<std::string>& desc, const arma::field<arma::vec>& objdesc, std::string model_type, const arma::vec& wv_empir, const arma::vec& tau);
RcppExport SEXP gmwm_getObjFunStarting(SEXP thetaSEXP, SEXP descSEXP, SEXP objdescSEXP, SEXP model_typeSEXP, SEXP wv_empirSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type desc(descSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type objdesc(objdescSEXP);
    Rcpp::traits::input_parameter< std::string >::type model_type(model_typeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type wv_empir(wv_empirSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau(tauSEXP);
    __result = Rcpp::wrap(getObjFunStarting(theta, desc, objdesc, model_type, wv_empir, tau));
    return __result;
END_RCPP
}
// getObjFun
double getObjFun(const arma::vec& theta, const std::vector<std::string>& desc, const arma::field<arma::vec>& objdesc, std::string model_type, const arma::mat& omega, const arma::vec& wv_empir, const arma::vec& tau);
RcppExport SEXP gmwm_getObjFun(SEXP thetaSEXP, SEXP descSEXP, SEXP objdescSEXP, SEXP model_typeSEXP, SEXP omegaSEXP, SEXP wv_empirSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type desc(descSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type objdesc(objdescSEXP);
    Rcpp::traits::input_parameter< std::string >::type model_type(model_typeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type wv_empir(wv_empirSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau(tauSEXP);
    __result = Rcpp::wrap(getObjFun(theta, desc, objdesc, model_type, omega, wv_empir, tau));
    return __result;
END_RCPP
}
// do_polyroot_arma
arma::cx_vec do_polyroot_arma(const arma::cx_vec& z);
RcppExport SEXP gmwm_do_polyroot_arma(SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::cx_vec& >::type z(zSEXP);
    __result = Rcpp::wrap(do_polyroot_arma(z));
    return __result;
END_RCPP
}
// do_polyroot_cpp
std::vector< std::complex<double> > do_polyroot_cpp(const std::vector< std::complex<double> >& z);
RcppExport SEXP gmwm_do_polyroot_cpp(SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::vector< std::complex<double> >& >::type z(zSEXP);
    __result = Rcpp::wrap(do_polyroot_cpp(z));
    return __result;
END_RCPP
}
// arma_to_wv
arma::vec arma_to_wv(arma::vec ar, arma::vec ma, arma::vec tau, double sigma);
RcppExport SEXP gmwm_arma_to_wv(SEXP arSEXP, SEXP maSEXP, SEXP tauSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type ar(arSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ma(maSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    __result = Rcpp::wrap(arma_to_wv(ar, ma, tau, sigma));
    return __result;
END_RCPP
}
// acf_sum
double acf_sum(arma::vec ar, arma::vec ma, unsigned int last_tau, double alpha);
RcppExport SEXP gmwm_acf_sum(SEXP arSEXP, SEXP maSEXP, SEXP last_tauSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type ar(arSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ma(maSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type last_tau(last_tauSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    __result = Rcpp::wrap(acf_sum(ar, ma, last_tau, alpha));
    return __result;
END_RCPP
}
// arma_to_wv_app
arma::vec arma_to_wv_app(arma::vec ar, arma::vec ma, arma::vec tau, double sigma, double alpha);
RcppExport SEXP gmwm_arma_to_wv_app(SEXP arSEXP, SEXP maSEXP, SEXP tauSEXP, SEXP sigmaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type ar(arSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ma(maSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    __result = Rcpp::wrap(arma_to_wv_app(ar, ma, tau, sigma, alpha));
    return __result;
END_RCPP
}
// qn_to_wv
arma::vec qn_to_wv(double q2, const arma::vec& tau);
RcppExport SEXP gmwm_qn_to_wv(SEXP q2SEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type q2(q2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau(tauSEXP);
    __result = Rcpp::wrap(qn_to_wv(q2, tau));
    return __result;
END_RCPP
}
// wn_to_wv
arma::vec wn_to_wv(double sig2, arma::vec tau);
RcppExport SEXP gmwm_wn_to_wv(SEXP sig2SEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau(tauSEXP);
    __result = Rcpp::wrap(wn_to_wv(sig2, tau));
    return __result;
END_RCPP
}
// rw_to_wv
arma::vec rw_to_wv(double sig2, const arma::vec& tau);
RcppExport SEXP gmwm_rw_to_wv(SEXP sig2SEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau(tauSEXP);
    __result = Rcpp::wrap(rw_to_wv(sig2, tau));
    return __result;
END_RCPP
}
// dr_to_wv
arma::vec dr_to_wv(double omega, const arma::vec& tau);
RcppExport SEXP gmwm_dr_to_wv(SEXP omegaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau(tauSEXP);
    __result = Rcpp::wrap(dr_to_wv(omega, tau));
    return __result;
END_RCPP
}
// ar1_to_wv
arma::vec ar1_to_wv(double phi, double sig2, const arma::vec& tau);
RcppExport SEXP gmwm_ar1_to_wv(SEXP phiSEXP, SEXP sig2SEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau(tauSEXP);
    __result = Rcpp::wrap(ar1_to_wv(phi, sig2, tau));
    return __result;
END_RCPP
}
// theoretical_wv
arma::vec theoretical_wv(const arma::vec& theta, const std::vector<std::string>& desc, const arma::field<arma::vec>& objdesc, const arma::vec& tau);
RcppExport SEXP gmwm_theoretical_wv(SEXP thetaSEXP, SEXP descSEXP, SEXP objdescSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type desc(descSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type objdesc(objdescSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau(tauSEXP);
    __result = Rcpp::wrap(theoretical_wv(theta, desc, objdesc, tau));
    return __result;
END_RCPP
}
// decomp_theoretical_wv
arma::mat decomp_theoretical_wv(const arma::vec& theta, const std::vector<std::string>& desc, const arma::field<arma::vec>& objdesc, const arma::vec& tau);
RcppExport SEXP gmwm_decomp_theoretical_wv(SEXP thetaSEXP, SEXP descSEXP, SEXP objdescSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type desc(descSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type objdesc(objdescSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau(tauSEXP);
    __result = Rcpp::wrap(decomp_theoretical_wv(theta, desc, objdesc, tau));
    return __result;
END_RCPP
}
// decomp_to_theo_wv
arma::vec decomp_to_theo_wv(const arma::mat& decomp);
RcppExport SEXP gmwm_decomp_to_theo_wv(SEXP decompSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat& >::type decomp(decompSEXP);
    __result = Rcpp::wrap(decomp_to_theo_wv(decomp));
    return __result;
END_RCPP
}
// read_imu
arma::field<arma::mat> read_imu(std::string file_path, std::string imu_type);
RcppExport SEXP gmwm_read_imu(SEXP file_pathSEXP, SEXP imu_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::string >::type file_path(file_pathSEXP);
    Rcpp::traits::input_parameter< std::string >::type imu_type(imu_typeSEXP);
    __result = Rcpp::wrap(read_imu(file_path, imu_type));
    return __result;
END_RCPP
}
// seq_cpp
arma::vec seq_cpp(int a, int b);
RcppExport SEXP gmwm_seq_cpp(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    __result = Rcpp::wrap(seq_cpp(a, b));
    return __result;
END_RCPP
}
// seq_len_cpp
arma::vec seq_len_cpp(unsigned int n);
RcppExport SEXP gmwm_seq_len_cpp(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    __result = Rcpp::wrap(seq_len_cpp(n));
    return __result;
END_RCPP
}
// quantile_cpp
arma::vec quantile_cpp(arma::vec x, const arma::vec& probs);
RcppExport SEXP gmwm_quantile_cpp(SEXP xSEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type probs(probsSEXP);
    __result = Rcpp::wrap(quantile_cpp(x, probs));
    return __result;
END_RCPP
}
// diff_cpp
arma::vec diff_cpp(arma::vec x, unsigned int lag, unsigned int differences);
RcppExport SEXP gmwm_diff_cpp(SEXP xSEXP, SEXP lagSEXP, SEXP differencesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type differences(differencesSEXP);
    __result = Rcpp::wrap(diff_cpp(x, lag, differences));
    return __result;
END_RCPP
}
// ARMAtoMA_cpp
arma::vec ARMAtoMA_cpp(arma::vec ar, arma::vec ma, int lag_max);
RcppExport SEXP gmwm_ARMAtoMA_cpp(SEXP arSEXP, SEXP maSEXP, SEXP lag_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type ar(arSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ma(maSEXP);
    Rcpp::traits::input_parameter< int >::type lag_max(lag_maxSEXP);
    __result = Rcpp::wrap(ARMAtoMA_cpp(ar, ma, lag_max));
    return __result;
END_RCPP
}
// cfilter
arma::vec cfilter(arma::vec x, arma::vec filter, int sides, bool circular);
RcppExport SEXP gmwm_cfilter(SEXP xSEXP, SEXP filterSEXP, SEXP sidesSEXP, SEXP circularSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type filter(filterSEXP);
    Rcpp::traits::input_parameter< int >::type sides(sidesSEXP);
    Rcpp::traits::input_parameter< bool >::type circular(circularSEXP);
    __result = Rcpp::wrap(cfilter(x, filter, sides, circular));
    return __result;
END_RCPP
}
// rfilter
arma::vec rfilter(arma::vec x, arma::vec filter, arma::vec init);
RcppExport SEXP gmwm_rfilter(SEXP xSEXP, SEXP filterSEXP, SEXP initSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type filter(filterSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init(initSEXP);
    __result = Rcpp::wrap(rfilter(x, filter, init));
    return __result;
END_RCPP
}
// ARMAacf_cpp
arma::vec ARMAacf_cpp(arma::vec ar, arma::vec ma, unsigned int lag_max);
RcppExport SEXP gmwm_ARMAacf_cpp(SEXP arSEXP, SEXP maSEXP, SEXP lag_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type ar(arSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ma(maSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type lag_max(lag_maxSEXP);
    __result = Rcpp::wrap(ARMAacf_cpp(ar, ma, lag_max));
    return __result;
END_RCPP
}
// dft_acf
arma::vec dft_acf(const arma::vec& x);
RcppExport SEXP gmwm_dft_acf(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    __result = Rcpp::wrap(dft_acf(x));
    return __result;
END_RCPP
}
// mean_diff
double mean_diff(const arma::vec& x);
RcppExport SEXP gmwm_mean_diff(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    __result = Rcpp::wrap(mean_diff(x));
    return __result;
END_RCPP
}
// get_summary
arma::field<arma::mat> get_summary(arma::vec theta, const std::vector<std::string>& desc, const arma::field<arma::vec>& objdesc, std::string model_type, const arma::vec& wv_empir, const arma::vec& theo, const arma::vec& scales, arma::mat V, const arma::mat& omega, double obj_value, unsigned int N, double alpha, bool robust, double eff, bool inference, bool fullV, bool bs_gof, bool bs_gof_p_ci, bool bs_theta_est, bool bs_ci, unsigned int B);
RcppExport SEXP gmwm_get_summary(SEXP thetaSEXP, SEXP descSEXP, SEXP objdescSEXP, SEXP model_typeSEXP, SEXP wv_empirSEXP, SEXP theoSEXP, SEXP scalesSEXP, SEXP VSEXP, SEXP omegaSEXP, SEXP obj_valueSEXP, SEXP NSEXP, SEXP alphaSEXP, SEXP robustSEXP, SEXP effSEXP, SEXP inferenceSEXP, SEXP fullVSEXP, SEXP bs_gofSEXP, SEXP bs_gof_p_ciSEXP, SEXP bs_theta_estSEXP, SEXP bs_ciSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type desc(descSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type objdesc(objdescSEXP);
    Rcpp::traits::input_parameter< std::string >::type model_type(model_typeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type wv_empir(wv_empirSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theo(theoSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type scales(scalesSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< double >::type obj_value(obj_valueSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type robust(robustSEXP);
    Rcpp::traits::input_parameter< double >::type eff(effSEXP);
    Rcpp::traits::input_parameter< bool >::type inference(inferenceSEXP);
    Rcpp::traits::input_parameter< bool >::type fullV(fullVSEXP);
    Rcpp::traits::input_parameter< bool >::type bs_gof(bs_gofSEXP);
    Rcpp::traits::input_parameter< bool >::type bs_gof_p_ci(bs_gof_p_ciSEXP);
    Rcpp::traits::input_parameter< bool >::type bs_theta_est(bs_theta_estSEXP);
    Rcpp::traits::input_parameter< bool >::type bs_ci(bs_ciSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type B(BSEXP);
    __result = Rcpp::wrap(get_summary(theta, desc, objdesc, model_type, wv_empir, theo, scales, V, omega, obj_value, N, alpha, robust, eff, inference, fullV, bs_gof, bs_gof_p_ci, bs_theta_est, bs_ci, B));
    return __result;
END_RCPP
}
// pseudo_logit_inv
arma::vec pseudo_logit_inv(const arma::vec& x);
RcppExport SEXP gmwm_pseudo_logit_inv(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    __result = Rcpp::wrap(pseudo_logit_inv(x));
    return __result;
END_RCPP
}
// logit_inv
arma::vec logit_inv(const arma::vec& x);
RcppExport SEXP gmwm_logit_inv(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    __result = Rcpp::wrap(logit_inv(x));
    return __result;
END_RCPP
}
// pseudo_logit
arma::vec pseudo_logit(const arma::vec& x);
RcppExport SEXP gmwm_pseudo_logit(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    __result = Rcpp::wrap(pseudo_logit(x));
    return __result;
END_RCPP
}
// logit
arma::vec logit(const arma::vec& x);
RcppExport SEXP gmwm_logit(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    __result = Rcpp::wrap(logit(x));
    return __result;
END_RCPP
}
// logit2
arma::vec logit2(const arma::vec& x);
RcppExport SEXP gmwm_logit2(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    __result = Rcpp::wrap(logit2(x));
    return __result;
END_RCPP
}
// logit2_inv
arma::vec logit2_inv(const arma::vec& x);
RcppExport SEXP gmwm_logit2_inv(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    __result = Rcpp::wrap(logit2_inv(x));
    return __result;
END_RCPP
}
// transform_values
arma::vec transform_values(const arma::vec& theta, const std::vector<std::string>& desc, const arma::field<arma::vec>& objdesc, std::string model_type);
RcppExport SEXP gmwm_transform_values(SEXP thetaSEXP, SEXP descSEXP, SEXP objdescSEXP, SEXP model_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type desc(descSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type objdesc(objdescSEXP);
    Rcpp::traits::input_parameter< std::string >::type model_type(model_typeSEXP);
    __result = Rcpp::wrap(transform_values(theta, desc, objdesc, model_type));
    return __result;
END_RCPP
}
// untransform_values
arma::colvec untransform_values(const arma::vec& theta, const std::vector<std::string>& desc, const arma::field<arma::vec>& objdesc, std::string model_type);
RcppExport SEXP gmwm_untransform_values(SEXP thetaSEXP, SEXP descSEXP, SEXP objdescSEXP, SEXP model_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type desc(descSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type objdesc(objdescSEXP);
    Rcpp::traits::input_parameter< std::string >::type model_type(model_typeSEXP);
    __result = Rcpp::wrap(untransform_values(theta, desc, objdesc, model_type));
    return __result;
END_RCPP
}
// minroot
double minroot(const arma::cx_vec& x);
RcppExport SEXP gmwm_minroot(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::cx_vec& >::type x(xSEXP);
    __result = Rcpp::wrap(minroot(x));
    return __result;
END_RCPP
}
// invert_check
bool invert_check(const arma::vec& x);
RcppExport SEXP gmwm_invert_check(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    __result = Rcpp::wrap(invert_check(x));
    return __result;
END_RCPP
}
// count_models
std::map<std::string, int> count_models(const std::vector<std::string>& desc);
RcppExport SEXP gmwm_count_models(SEXP descSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type desc(descSEXP);
    __result = Rcpp::wrap(count_models(desc));
    return __result;
END_RCPP
}
// order_AR1s
arma::vec order_AR1s(arma::vec theta, const std::vector<std::string>& desc, const arma::field<arma::vec> objdesc);
RcppExport SEXP gmwm_order_AR1s(SEXP thetaSEXP, SEXP descSEXP, SEXP objdescSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type desc(descSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type objdesc(objdescSEXP);
    __result = Rcpp::wrap(order_AR1s(theta, desc, objdesc));
    return __result;
END_RCPP
}
// ar1_to_gm
arma::vec ar1_to_gm(arma::vec theta, double freq);
RcppExport SEXP gmwm_ar1_to_gm(SEXP thetaSEXP, SEXP freqSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type freq(freqSEXP);
    __result = Rcpp::wrap(ar1_to_gm(theta, freq));
    return __result;
END_RCPP
}
// gm_to_ar1
arma::vec gm_to_ar1(arma::vec theta, double freq);
RcppExport SEXP gmwm_gm_to_ar1(SEXP thetaSEXP, SEXP freqSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type freq(freqSEXP);
    __result = Rcpp::wrap(gm_to_ar1(theta, freq));
    return __result;
END_RCPP
}
// model_objdesc
arma::field<arma::vec> model_objdesc(std::vector<std::string> desc);
RcppExport SEXP gmwm_model_objdesc(SEXP descSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type desc(descSEXP);
    __result = Rcpp::wrap(model_objdesc(desc));
    return __result;
END_RCPP
}
// model_theta
arma::vec model_theta(std::vector<std::string> desc);
RcppExport SEXP gmwm_model_theta(SEXP descSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type desc(descSEXP);
    __result = Rcpp::wrap(model_theta(desc));
    return __result;
END_RCPP
}
// model_process_desc
std::vector<std::string> model_process_desc(std::vector<std::string> desc);
RcppExport SEXP gmwm_model_process_desc(SEXP descSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type desc(descSEXP);
    __result = Rcpp::wrap(model_process_desc(desc));
    return __result;
END_RCPP
}
// ci_eta3
arma::mat ci_eta3(arma::vec y, arma::vec dims, double alpha_ov_2);
RcppExport SEXP gmwm_ci_eta3(SEXP ySEXP, SEXP dimsSEXP, SEXP alpha_ov_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_ov_2(alpha_ov_2SEXP);
    __result = Rcpp::wrap(ci_eta3(y, dims, alpha_ov_2));
    return __result;
END_RCPP
}
// ci_eta3_robust
arma::mat ci_eta3_robust(arma::vec wv_robust, arma::mat wv_ci_class, double alpha_ov_2, double eff);
RcppExport SEXP gmwm_ci_eta3_robust(SEXP wv_robustSEXP, SEXP wv_ci_classSEXP, SEXP alpha_ov_2SEXP, SEXP effSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type wv_robust(wv_robustSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type wv_ci_class(wv_ci_classSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_ov_2(alpha_ov_2SEXP);
    Rcpp::traits::input_parameter< double >::type eff(effSEXP);
    __result = Rcpp::wrap(ci_eta3_robust(wv_robust, wv_ci_class, alpha_ov_2, eff));
    return __result;
END_RCPP
}
// ci_wave_variance
arma::mat ci_wave_variance(const arma::field<arma::vec>& signal_modwt_bw, const arma::vec& wv, std::string type, double alpha_ov_2, bool robust, double eff);
RcppExport SEXP gmwm_ci_wave_variance(SEXP signal_modwt_bwSEXP, SEXP wvSEXP, SEXP typeSEXP, SEXP alpha_ov_2SEXP, SEXP robustSEXP, SEXP effSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type signal_modwt_bw(signal_modwt_bwSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type wv(wvSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_ov_2(alpha_ov_2SEXP);
    Rcpp::traits::input_parameter< bool >::type robust(robustSEXP);
    Rcpp::traits::input_parameter< double >::type eff(effSEXP);
    __result = Rcpp::wrap(ci_wave_variance(signal_modwt_bw, wv, type, alpha_ov_2, robust, eff));
    return __result;
END_RCPP
}
// wave_variance
arma::vec wave_variance(const arma::field<arma::vec>& signal_modwt_bw, bool robust, double eff);
RcppExport SEXP gmwm_wave_variance(SEXP signal_modwt_bwSEXP, SEXP robustSEXP, SEXP effSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type signal_modwt_bw(signal_modwt_bwSEXP);
    Rcpp::traits::input_parameter< bool >::type robust(robustSEXP);
    Rcpp::traits::input_parameter< double >::type eff(effSEXP);
    __result = Rcpp::wrap(wave_variance(signal_modwt_bw, robust, eff));
    return __result;
END_RCPP
}
// wvar_cpp
arma::mat wvar_cpp(const arma::field<arma::vec>& signal_modwt_bw, bool robust, double eff, double alpha, std::string ci_type);
RcppExport SEXP gmwm_wvar_cpp(SEXP signal_modwt_bwSEXP, SEXP robustSEXP, SEXP effSEXP, SEXP alphaSEXP, SEXP ci_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type signal_modwt_bw(signal_modwt_bwSEXP);
    Rcpp::traits::input_parameter< bool >::type robust(robustSEXP);
    Rcpp::traits::input_parameter< double >::type eff(effSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< std::string >::type ci_type(ci_typeSEXP);
    __result = Rcpp::wrap(wvar_cpp(signal_modwt_bw, robust, eff, alpha, ci_type));
    return __result;
END_RCPP
}
// modwt_wvar_cpp
arma::mat modwt_wvar_cpp(const arma::vec& signal, unsigned int nlevels, bool robust, double eff, double alpha, std::string ci_type, std::string strWavelet, std::string decomp);
RcppExport SEXP gmwm_modwt_wvar_cpp(SEXP signalSEXP, SEXP nlevelsSEXP, SEXP robustSEXP, SEXP effSEXP, SEXP alphaSEXP, SEXP ci_typeSEXP, SEXP strWaveletSEXP, SEXP decompSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type signal(signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nlevels(nlevelsSEXP);
    Rcpp::traits::input_parameter< bool >::type robust(robustSEXP);
    Rcpp::traits::input_parameter< double >::type eff(effSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< std::string >::type ci_type(ci_typeSEXP);
    Rcpp::traits::input_parameter< std::string >::type strWavelet(strWaveletSEXP);
    Rcpp::traits::input_parameter< std::string >::type decomp(decompSEXP);
    __result = Rcpp::wrap(modwt_wvar_cpp(signal, nlevels, robust, eff, alpha, ci_type, strWavelet, decomp));
    return __result;
END_RCPP
}
// batch_modwt_wvar_cpp
arma::field<arma::mat> batch_modwt_wvar_cpp(const arma::mat& signal, unsigned int nlevels, bool robust, double eff, double alpha, std::string ci_type, std::string strWavelet, std::string decomp);
RcppExport SEXP gmwm_batch_modwt_wvar_cpp(SEXP signalSEXP, SEXP nlevelsSEXP, SEXP robustSEXP, SEXP effSEXP, SEXP alphaSEXP, SEXP ci_typeSEXP, SEXP strWaveletSEXP, SEXP decompSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat& >::type signal(signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nlevels(nlevelsSEXP);
    Rcpp::traits::input_parameter< bool >::type robust(robustSEXP);
    Rcpp::traits::input_parameter< double >::type eff(effSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< std::string >::type ci_type(ci_typeSEXP);
    Rcpp::traits::input_parameter< std::string >::type strWavelet(strWaveletSEXP);
    Rcpp::traits::input_parameter< std::string >::type decomp(decompSEXP);
    __result = Rcpp::wrap(batch_modwt_wvar_cpp(signal, nlevels, robust, eff, alpha, ci_type, strWavelet, decomp));
    return __result;
END_RCPP
}
// scales_cpp
arma::vec scales_cpp(unsigned int nb_level);
RcppExport SEXP gmwm_scales_cpp(SEXP nb_levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< unsigned int >::type nb_level(nb_levelSEXP);
    __result = Rcpp::wrap(scales_cpp(nb_level));
    return __result;
END_RCPP
}
// qmf
arma::vec qmf(arma::vec g, bool inverse);
RcppExport SEXP gmwm_qmf(SEXP gSEXP, SEXP inverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type g(gSEXP);
    Rcpp::traits::input_parameter< bool >::type inverse(inverseSEXP);
    __result = Rcpp::wrap(qmf(g, inverse));
    return __result;
END_RCPP
}
// haar_filter
arma::field<arma::vec> haar_filter();
RcppExport SEXP gmwm_haar_filter() {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    __result = Rcpp::wrap(haar_filter());
    return __result;
END_RCPP
}
// select_filter
arma::field<arma::vec> select_filter(std::string filter_name);
RcppExport SEXP gmwm_select_filter(SEXP filter_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::string >::type filter_name(filter_nameSEXP);
    __result = Rcpp::wrap(select_filter(filter_name));
    return __result;
END_RCPP
}
